@use '@angular/material' as mat;
@import '@angular/material/theming';

// Plus imports for other components in your app.

// Include the base styles for Angular Material core. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// **Be sure that you only ever include this mixin once!**
// TODO(v15): As of v15 mat.legacy-core no longer includes default typography styles.
//  The following line adds:
//    1. Default typography styles for all components
//    2. Styles for typography hierarchy classes (e.g. .mat-headline-1)
//  If you specify typography styles for the components you use elsewhere, you should delete this line.
//  If you don't need the default component typographies but still want the hierarchy styles,
//  you can delete this line and instead use:
//    `@include mat.legacy-typography-hierarchy(mat.define-legacy-typography-config());`
@include mat.all-legacy-component-typographies();
@include mat.legacy-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue.
$light-app-primary: mat.define-palette(mat.$blue-palette);
$light-app-accent:  mat.define-palette(mat.$green-palette, 400);

// The warn palette is optional (defaults to red).
$light-app-warn:  mat.define-palette(mat.$red-palette, 400);

// Create the theme object (a Sass map containing all of the palettes).
$light-app-theme: mat.define-light-theme($light-app-primary, $light-app-accent, $light-app-warn);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-legacy-component-themes($light-app-theme);


// Define an alternate dark theme.
$dark-primary: mat.define-palette(mat.$blue-palette);
$dark-accent:  mat.define-palette(mat.$green-palette, 400);
$dark-warn:    mat.define-palette(mat.$red-palette, 400);
$dark-theme:   mat.define-dark-theme($dark-primary, $dark-accent, $dark-warn);

// Include the alternative theme styles inside of a block with a CSS class. You can make this
// CSS class whatever you want. In this example, any component inside of an element with 
// `.unicorn-dark-theme` will be affected by this alternate dark theme instead of the default theme. 
.theme-dark,
.theme-gray {
  @include mat.all-legacy-component-themes($dark-theme);
}
.mat-dialog-container{
  background-color: whitesmoke
}
.mat-step-icon-state-number {
   color: red
}
